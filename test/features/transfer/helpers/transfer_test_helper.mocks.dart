// Mocks generated by Mockito 5.4.2 from annotations
// in template_clean_architecture/test/features/transfer/helpers/transfer_test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i3;
import 'package:template_clean_architecture/core/error/error.dart' as _i6;
import 'package:template_clean_architecture/features/transfer/data/datasources/remote/transfer_api_service.dart'
    as _i10;
import 'package:template_clean_architecture/features/transfer/data/models/model.dart'
    as _i11;
import 'package:template_clean_architecture/features/transfer/data/models/searching_byusername_response.dart'
    as _i12;
import 'package:template_clean_architecture/features/transfer/domain/entities/entities.dart'
    as _i8;
import 'package:template_clean_architecture/features/transfer/domain/entities/user_byusername_entities.dart'
    as _i9;
import 'package:template_clean_architecture/features/transfer/domain/repositories/repositories.dart'
    as _i4;
import 'package:template_clean_architecture/features/transfer/domain/usecases/usecases.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpResponse_1<T> extends _i1.SmartFake
    implements _i3.HttpResponse<T> {
  _FakeHttpResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransferRepository_2 extends _i1.SmartFake
    implements _i4.TransferRepository {
  _FakeTransferRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransferRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferRepository extends _i1.Mock
    implements _i4.TransferRepository {
  MockTransferRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> transferRepository(
          _i7.TransferParams? transferParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #transferRepository,
          [transferParams],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, String>>.value(
            _FakeEither_0<_i6.Failure, String>(
          this,
          Invocation.method(
            #transferRepository,
            [transferParams],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, String>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i8.TransferHistoryEntity>>
      transferHistoryRespository(String? limit) => (super.noSuchMethod(
            Invocation.method(
              #transferHistoryRespository,
              [limit],
            ),
            returnValue: _i5.Future<
                    _i2.Either<_i6.Failure, _i8.TransferHistoryEntity>>.value(
                _FakeEither_0<_i6.Failure, _i8.TransferHistoryEntity>(
              this,
              Invocation.method(
                #transferHistoryRespository,
                [limit],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i6.Failure, _i8.TransferHistoryEntity>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.ResponseSearchUsername>> getByUsername(
          String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByUsername,
          [username],
        ),
        returnValue: _i5
            .Future<_i2.Either<_i6.Failure, _i9.ResponseSearchUsername>>.value(
            _FakeEither_0<_i6.Failure, _i9.ResponseSearchUsername>(
          this,
          Invocation.method(
            #getByUsername,
            [username],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i9.ResponseSearchUsername>>);
}

/// A class which mocks [TransferRemoteService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferRemoteService extends _i1.Mock
    implements _i10.TransferRemoteService {
  MockTransferRemoteService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.HttpResponse<_i11.TransferResponse>> transferService({
    String? token,
    String? contentType,
    Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transferService,
          [],
          {
            #token: token,
            #contentType: contentType,
            #body: body,
          },
        ),
        returnValue: _i5.Future<_i3.HttpResponse<_i11.TransferResponse>>.value(
            _FakeHttpResponse_1<_i11.TransferResponse>(
          this,
          Invocation.method(
            #transferService,
            [],
            {
              #token: token,
              #contentType: contentType,
              #body: body,
            },
          ),
        )),
      ) as _i5.Future<_i3.HttpResponse<_i11.TransferResponse>>);
  @override
  _i5.Future<_i3.HttpResponse<_i11.TransferHistoryResponse>>
      transferHistoryService({
    String? token,
    String? contentType,
    String? limit,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #transferHistoryService,
              [],
              {
                #token: token,
                #contentType: contentType,
                #limit: limit,
              },
            ),
            returnValue: _i5
                .Future<_i3.HttpResponse<_i11.TransferHistoryResponse>>.value(
                _FakeHttpResponse_1<_i11.TransferHistoryResponse>(
              this,
              Invocation.method(
                #transferHistoryService,
                [],
                {
                  #token: token,
                  #contentType: contentType,
                  #limit: limit,
                },
              ),
            )),
          ) as _i5.Future<_i3.HttpResponse<_i11.TransferHistoryResponse>>);
  @override
  _i5.Future<_i3.HttpResponse<_i12.SearchingByUsernameResponse>>
      getDataUsername({
    String? token,
    String? contentType,
    String? username,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getDataUsername,
              [],
              {
                #token: token,
                #contentType: contentType,
                #username: username,
              },
            ),
            returnValue: _i5.Future<
                    _i3.HttpResponse<_i12.SearchingByUsernameResponse>>.value(
                _FakeHttpResponse_1<_i12.SearchingByUsernameResponse>(
              this,
              Invocation.method(
                #getDataUsername,
                [],
                {
                  #token: token,
                  #contentType: contentType,
                  #username: username,
                },
              ),
            )),
          ) as _i5.Future<_i3.HttpResponse<_i12.SearchingByUsernameResponse>>);
}

/// A class which mocks [GetUserByUsernameUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserByUsernameUsecase extends _i1.Mock
    implements _i7.GetUserByUsernameUsecase {
  MockGetUserByUsernameUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i9.ResponseSearchUsername>> call(
          {String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5
            .Future<_i2.Either<_i6.Failure, _i9.ResponseSearchUsername>>.value(
            _FakeEither_0<_i6.Failure, _i9.ResponseSearchUsername>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i9.ResponseSearchUsername>>);
}

/// A class which mocks [TransferHistoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferHistoryUseCase extends _i1.Mock
    implements _i7.TransferHistoryUseCase {
  MockTransferHistoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TransferRepository get transferRepository => (super.noSuchMethod(
        Invocation.getter(#transferRepository),
        returnValue: _FakeTransferRepository_2(
          this,
          Invocation.getter(#transferRepository),
        ),
      ) as _i4.TransferRepository);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i8.TransferHistoryEntity>> call(
          {String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5
            .Future<_i2.Either<_i6.Failure, _i8.TransferHistoryEntity>>.value(
            _FakeEither_0<_i6.Failure, _i8.TransferHistoryEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i8.TransferHistoryEntity>>);
}

/// A class which mocks [TransferUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransferUseCase extends _i1.Mock implements _i7.TransferUseCase {
  MockTransferUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, String>> call(
          {_i7.TransferParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, String>>.value(
            _FakeEither_0<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, String>>);
}
